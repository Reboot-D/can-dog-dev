'use client'

import { useEffect, useState } from 'react'
import { useTranslations } from 'next-intl'

interface HealthStatus {
  status: 'healthy' | 'unhealthy' | 'configuration_missing' | 'error'
  supabase: 'connected' | 'disconnected' | 'not_configured' | 'unknown'
  timestamp: string
  error?: string
}

export default function Home() {
  const t = useTranslations()
  const [healthStatus, setHealthStatus] = useState<HealthStatus | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    async function checkHealth() {
      try {
        const response = await fetch('/api/health')
        const data = await response.json()
        setHealthStatus(data)
      } catch {
        setHealthStatus({
          status: 'error',
          supabase: 'unknown',
          timestamp: new Date().toISOString(),
          error: t('home.status.failedToLoadStatus')
        })
      } finally {
        setLoading(false)
      }
    }

    checkHealth()
  }, [t])

  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center space-y-8">
        <h1 className="text-4xl font-bold">{t('home.title')}</h1>
        
        <div className="p-6 bg-gray-100 dark:bg-gray-800 rounded-lg">
          <h2 className="text-xl font-semibold mb-4">{t('home.status.systemStatus')}</h2>
          
          {loading ? (
            <p className="text-gray-600 dark:text-gray-400">{t('home.status.checkingConnection')}</p>
          ) : healthStatus ? (
            <div className="space-y-2">
              <p className="flex items-center justify-center space-x-2">
                <span className={`w-3 h-3 rounded-full ${
                  healthStatus.status === 'healthy' ? 'bg-green-500' : 'bg-red-500'
                }`} />
                <span>{t('home.status.api')}: {
                  healthStatus.status === 'healthy' ? t('home.status.healthy') :
                  healthStatus.status === 'unhealthy' ? t('home.status.unhealthy') :
                  healthStatus.status === 'configuration_missing' ? t('home.status.notConfigured') :
                  t('home.status.error')
                }</span>
              </p>
              <p className="flex items-center justify-center space-x-2">
                <span className={`w-3 h-3 rounded-full ${
                  healthStatus.supabase === 'connected' ? 'bg-green-500' : 'bg-red-500'
                }`} />
                <span>{t('home.status.supabase')}: {
                  healthStatus.supabase === 'connected' ? t('home.status.connected') :
                  healthStatus.supabase === 'disconnected' ? t('home.status.disconnected') :
                  healthStatus.supabase === 'not_configured' ? t('home.status.notConfigured') :
                  t('home.status.error')
                }</span>
              </p>
              {healthStatus.error && (
                <p className="text-red-500 text-sm mt-2">{t('home.status.error')}: {healthStatus.error}</p>
              )}
            </div>
          ) : (
            <p className="text-red-500">{t('home.status.failedToLoadStatus')}</p>
          )}
        </div>

        <p className="text-gray-600 dark:text-gray-400">
          {t('home.subtitle')}
        </p>
      </div>
    </div>
  )
}