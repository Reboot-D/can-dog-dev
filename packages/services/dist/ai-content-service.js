import { GoogleGenerativeAI } from '@google/generative-ai';
export class AIContentService {
    constructor(config) {
        this.config = config;
        this.genAI = new GoogleGenerativeAI(config.geminiApiKey);
        this.model = this.genAI.getGenerativeModel({ model: 'gemini-pro' });
    }
    /**
     * Generate AI-powered notification content in Simplified Chinese
     */
    async generateNotificationContent(context) {
        try {
            const prompt = this.createNotificationPrompt(context);
            console.log(`[AIContentService] Generating content for pet: ${context.petName}, event: ${context.eventTitle}`);
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            const generatedText = response.text();
            if (!generatedText || generatedText.trim().length === 0) {
                return {
                    subject: '',
                    friendlyReminder: '',
                    careTip: '',
                    success: false,
                    error: 'No content generated by AI service'
                };
            }
            // Parse the structured response
            const parsedContent = this.parseGeneratedContent(generatedText, context);
            console.log(`[AIContentService] ✅ Generated notification content for ${context.petName}`);
            return {
                ...parsedContent,
                success: true
            };
        }
        catch (error) {
            console.error('[AIContentService] Error generating notification content:', error);
            // Provide fallback content in case of AI service failure
            const fallbackContent = this.createFallbackContent(context);
            return {
                ...fallbackContent,
                success: false,
                error: error instanceof Error ? error.message : 'Unknown AI service error'
            };
        }
    }
    /**
     * Create the prompt for generating notification content in Chinese
     */
    createNotificationPrompt(context) {
        const breedInfo = context.petBreed ? `品种：${context.petBreed}` : '品种未知';
        const userName = context.userName || '主人';
        return `你是一个专业的宠物护理助手。请为以下宠物事件生成一个友好的提醒通知。

宠物信息：
- 名字：${context.petName}
- ${breedInfo}
- 主人：${userName}

事件信息：
- 事件：${context.eventTitle}
- 日期：${context.eventDate}

请生成以下内容，全部使用简体中文：

1. 邮件主题（简洁，包含宠物名字和事件类型）
2. 友好的提醒内容（温馨提醒即将到来的事件，语调友善）
3. 相关的护理建议（针对这个事件类型提供实用的护理小贴士）

请使用以下JSON格式回复，确保内容适合中国宠物主人的文化背景：

{
  "subject": "邮件主题",
  "friendlyReminder": "友好的提醒内容，2-3句话",
  "careTip": "相关护理建议，提供实用的小贴士"
}

重要提示：
- 保持语调温馨友好
- 避免过于医学化的用词
- 如果是健康相关事件，提醒主人咨询专业兽医
- 内容要符合中国文化背景和表达习惯`;
    }
    /**
     * Parse the AI-generated content from JSON format
     */
    parseGeneratedContent(generatedText, context) {
        try {
            // Try to extract JSON from the response
            const jsonMatch = generatedText.match(/\{[\s\S]*\}/);
            if (jsonMatch) {
                const parsed = JSON.parse(jsonMatch[0]);
                return {
                    subject: parsed.subject || this.createFallbackSubject(context),
                    friendlyReminder: parsed.friendlyReminder || this.createFallbackReminder(context),
                    careTip: parsed.careTip || this.createFallbackTip(context)
                };
            }
            // If no JSON found, try to parse line by line
            const lines = generatedText.split('\n').filter(line => line.trim());
            let subject = '';
            let friendlyReminder = '';
            let careTip = '';
            for (const line of lines) {
                if (line.includes('主题') || line.includes('subject')) {
                    subject = line.replace(/.*[:：]/, '').trim();
                }
                else if (line.includes('提醒') || line.includes('reminder')) {
                    friendlyReminder = line.replace(/.*[:：]/, '').trim();
                }
                else if (line.includes('建议') || line.includes('tip')) {
                    careTip = line.replace(/.*[:：]/, '').trim();
                }
            }
            return {
                subject: subject || this.createFallbackSubject(context),
                friendlyReminder: friendlyReminder || this.createFallbackReminder(context),
                careTip: careTip || this.createFallbackTip(context)
            };
        }
        catch (parseError) {
            console.warn('[AIContentService] Failed to parse AI response, using fallback content');
            return this.createFallbackContent(context);
        }
    }
    /**
     * Create fallback content when AI service fails
     */
    createFallbackContent(context) {
        return {
            subject: this.createFallbackSubject(context),
            friendlyReminder: this.createFallbackReminder(context),
            careTip: this.createFallbackTip(context)
        };
    }
    createFallbackSubject(context) {
        return `${context.petName}的${context.eventTitle}提醒`;
    }
    createFallbackReminder(context) {
        const userName = context.userName || '主人';
        return `亲爱的${userName}，这是一个友好的提醒：${context.petName}有一个即将到来的${context.eventTitle}，预定日期是${context.eventDate}。请记得为您的爱宠做好准备。`;
    }
    createFallbackTip(context) {
        // Provide generic care tips based on event type
        if (context.eventTitle.includes('疫苗') || context.eventTitle.includes('免疫')) {
            return '疫苗接种前，请确保宠物身体健康，避免在接种前几天给宠物洗澡。接种后观察宠物的反应，如有异常及时联系兽医。';
        }
        else if (context.eventTitle.includes('洗澡') || context.eventTitle.includes('美容')) {
            return '定期洗澡有助于保持宠物的卫生健康。使用专用的宠物洗浴用品，注意水温适中，洗后及时吹干以防感冒。';
        }
        else if (context.eventTitle.includes('体检') || context.eventTitle.includes('检查')) {
            return '定期体检是预防疾病的重要措施。建议提前预约，并准备好宠物的健康记录，以便兽医更好地了解宠物的健康状况。';
        }
        else {
            return '请记得按时完成这个重要的护理事项。如果您有任何疑问，建议咨询专业的兽医或宠物护理专家。';
        }
    }
    /**
     * Validate the generated content meets basic requirements
     */
    validateContent(content) {
        return content.subject.length > 0 &&
            content.friendlyReminder.length > 10 &&
            content.careTip.length > 10;
    }
}
