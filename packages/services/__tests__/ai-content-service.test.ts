import { AIContentService } from '../ai-content-service';
import { GoogleGenerativeAI } from '@google/generative-ai';

// Mock Google Generative AI
jest.mock('@google/generative-ai');
const MockGoogleGenerativeAI = GoogleGenerativeAI as jest.MockedClass<typeof GoogleGenerativeAI>;

describe('AIContentService', () => {
  let service: AIContentService;
  let mockModel: any;
  let mockGenAI: any;

  beforeEach(() => {
    mockModel = {
      generateContent: jest.fn(),
    };

    mockGenAI = {
      getGenerativeModel: jest.fn().mockReturnValue(mockModel),
    };

    MockGoogleGenerativeAI.mockImplementation(() => mockGenAI);

    service = new AIContentService({
      geminiApiKey: 'test-api-key'
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('generateNotificationContent', () => {
    const mockContext = {
      petName: '小白',
      petBreed: '金毛',
      eventTitle: '疫苗接种',
      eventDate: '2024-01-15',
      userName: '张三'
    };

    it('should generate AI notification content successfully', async () => {
      const mockAIResponse = {
        "subject": "小白的疫苗接种提醒",
        "friendlyReminder": "亲爱的张三，温馨提醒您小白的疫苗接种预约在2024-01-15，请记得按时带小白去接种疫苗哦！",
        "careTip": "疫苗接种前请确保小白身体健康，避免在接种前几天洗澡。接种后注意观察小白的反应，如有异常请及时联系兽医。"
      };

      mockModel.generateContent.mockResolvedValue({
        response: {
          text: () => JSON.stringify(mockAIResponse)
        }
      });

      const result = await service.generateNotificationContent(mockContext);

      expect(result.success).toBe(true);
      expect(result.subject).toBe('小白的疫苗接种提醒');
      expect(result.friendlyReminder).toContain('张三');
      expect(result.careTip).toContain('疫苗接种');
    });

    it('should handle AI service failures with fallback content', async () => {
      mockModel.generateContent.mockRejectedValue(new Error('AI service unavailable'));

      const result = await service.generateNotificationContent(mockContext);

      expect(result.success).toBe(false);
      expect(result.error).toContain('AI service unavailable');
      expect(result.subject).toBeTruthy(); // Should have fallback content
      expect(result.friendlyReminder).toBeTruthy();
      expect(result.careTip).toBeTruthy();
    });

    it('should handle malformed AI responses', async () => {
      mockModel.generateContent.mockResolvedValue({
        response: {
          text: () => 'Invalid JSON response from AI'
        }
      });

      const result = await service.generateNotificationContent(mockContext);

      expect(result.success).toBe(true);
      expect(result.subject).toBeTruthy(); // Should fallback to default content
      expect(result.friendlyReminder).toBeTruthy();
      expect(result.careTip).toBeTruthy();
    });

    it('should handle empty AI responses', async () => {
      mockModel.generateContent.mockResolvedValue({
        response: {
          text: () => ''
        }
      });

      const result = await service.generateNotificationContent(mockContext);

      expect(result.success).toBe(false);
      expect(result.error).toBe('No content generated by AI service');
      expect(result.subject).toBe('');
    });

    it('should generate appropriate fallback content for different event types', async () => {
      mockModel.generateContent.mockRejectedValue(new Error('Service down'));

      // Test vaccination event
      const vaccinationResult = await service.generateNotificationContent({
        ...mockContext,
        eventTitle: '疫苗接种'
      });

      expect(vaccinationResult.careTip).toContain('疫苗接种');

      // Test grooming event
      const groomingResult = await service.generateNotificationContent({
        ...mockContext,
        eventTitle: '美容洗澡'
      });

      expect(groomingResult.careTip).toContain('洗澡');

      // Test health check event
      const checkupResult = await service.generateNotificationContent({
        ...mockContext,
        eventTitle: '体检'
      });

      expect(checkupResult.careTip).toContain('体检');
    });

    it('should handle different input variations', async () => {
      mockModel.generateContent.mockResolvedValue({
        response: {
          text: () => JSON.stringify({
            subject: '测试主题',
            friendlyReminder: '测试提醒',
            careTip: '测试建议'
          })
        }
      });

      // Test without breed
      const noBreadResult = await service.generateNotificationContent({
        petName: '小黑',
        eventTitle: '洗澡',
        eventDate: '2024-01-20'
      });

      expect(noBreadResult.success).toBe(true);

      // Test without user name
      const noUserResult = await service.generateNotificationContent({
        petName: '小花',
        petBreed: '萨摩耶',
        eventTitle: '剪指甲',
        eventDate: '2024-01-25'
      });

      expect(noUserResult.success).toBe(true);
    });
  });

  describe('error handling', () => {
    it('should handle service initialization errors', () => {
      expect(() => {
        new AIContentService({
          geminiApiKey: ''
        });
      }).toThrow();
    });
  });
});